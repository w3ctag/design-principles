<pre class="metadata">
Title: Client-side API Design Principles
Group: W3C TAG
Shortname: design-principles
Status: DREAM
Editor: Domenic Denicola, Google https://www.google.com/, https://domenic.me/, d@domenic.me
ED: https://w3ctag.github.io/design-principles
Abstract: This document contains a small-but-growing set of design principles collected by the W3C TAG while <a href="https://github.com/w3ctag/spec-reviews/">reviewing</a> specifications.
Default Biblio Status: current
Markup Shorthands: markdown on
!Other Editorial Contributions: <a href="https://www.w3.org/2001/tag/">Members of the TAG</a>
!Participate: <a href="https://github.com/w3ctag/design-principles">GitHub w3ctag/design-principles</a> (<a href="https://github.com/w3ctag/design-principles/issues/new">file an issue</a>; <a href="https://github.com/w3ctag/design-principles/issues?state=open">open issues</a>)

Link Defaults: html (dfn) queue a task/in parallel/reflect
</pre>
<pre class="link-defaults">
spec:html; type:dfn; for:/; text:browsing context
</pre>

<style>
    table.data {
        text-align: left;
        font-size: small;
    }
</style>

<h2 id="js">JavaScript Language</h2>

<h3 id="js-only">Web APIs are for JavaScript</h3>

The language that web APIs are meant to be used in, and specified for, is JavaScript (also known as
[[!ECMASCRIPT]]). They are not language-agnostic, and are not meant to be.

This is sometimes a confusing point because [[WEBIDL]] descended from the language-agnostic OMG IDL
(and at one point, included "Java Bindings"). Even today, the structure of the document contains a
confusing and redundant division between the "Interface definition language" and the "ECMAScript
binding". Rest assured that this division is simply a historical artifact of document structure,
and does not imply anything about the intent of Web IDL in general. The only reason it remains is
that nobody has taken the time to eradicate it.

As such, when designing your APIs, your primary concern should be with the interface you present to
JavaScript developers. You can freely rely upon language-specific semantics and conventions, with
no need to keep things generalized.

<h3 id="js-rtc">Preserve run-to-completion semantics</h3>

Web APIs are essentially vehicles for extruding C++- (or Rust-) authored capabilities into the
JavaScript code that developers write. As such, it's important to respect the invariants that are
in play in normal JavaScript code. One of the most important of these is <em>run-to-completion
semantics</em>: wherein each turn of the JavaScript event loop is processed completely before
returning control to the user agent.

In particular, this means that JavaScript functions cannot be preempted mid-execution, and thus
that any data observed within the function will stay constant as long as that function is active.
This is not the case in other languages, which allow data races via multithreading or other
techniques—a C function can be preempted at any time, with the bindings it has access to changing
values from one line to the next.

This no-data-races invariant is extensively relied upon in JavaScript programs. As such, the
invariant must never be violated—even by web APIs, which are often implemented in languages that
<em>do</em> allow data races. Although the user agent may be using threads or other techniques to
modify state <a>in parallel</a>, web APIs must never expose such changing state directly to
developers. Instead, they should <a>queue a task</a> to modify author-observable state (such as an
object property).

<h3 id="js-gc">Do not expose garbage collection</h3>

There must not be a way for author code to deduce when/if garbage collection of JavaScript objects
has run.

The reason for this is somewhat subtle. If garbage collection timing were observable, then authors
could easily write code relying on specific garbage collection timing. But this timing is almost
certainly not the same across user agents, which means the resulting code will be
non-interoperable. Worse, according to the usual rules of game theory as applied to browsers, this
kind of scenario could force other user agents to copy the garbage collection timing of the
original in order to create interoperability. This would cause current garbage collection
strategies to ossify, preventing improvement in one of the most dynamic areas of JavaScript
virtual machine technology.

In particular, this means that you can't expose any API that acts as a weak reference, e.g. with a
property that becomes <code>null</code> once garbage collection runs. Such freeing of memory must
be entirely deterministic.

<div class="note">
There is some speculative discussion of exposing weak references such that their finalization is
only observable between event loop turns in this <a
href="https://github.com/tc39/proposal-weakrefs">stage 1 proposal under discussion at TC39</a>.
However, this remains contentious and does not yet have consensus in TC39 or among implementers.
</div>

<h2 id="api-surface">API Surface Concerns</h2>

<h3 id="naming-is-hard">Naming things</h3>

Naming is hard! We would all like a silver-bullet for naming APIs...

Names take meaning from:

* signposting (the name itself)
* use (how people come to understand the name over time)
* context (the object on the left-hand side, for example)

Consistency is a good principle that helps to create a platform that users can navigate intuitively
and by name association.

Please consult widely on names in your APIs.

<h3 id="attributes-like-data">Attributes should behave like data properties</h3>

[[!WEBIDL]] attributes are reified in JavaScript as accessor properties, i.e. properties with
separate getter and setter functions which can react independently. This is in contrast to the
"default" style of JavaScript properties, data properties, which do not have configurable behavior
but instead can simply be set and retrieved, or optionally marked read-only so that they cannot be
set.

Data property semantics are what are generally expected by JavaScript developers when interfacing
with objects. As such, although getters and setters allow infinite customizability when defining
your Web IDL attributes, you should endeavor to make the resulting accessor properties behave as
much like a data property as possible. Specific guidance in this regard includes:

* Getters must not have any (observable) side effects.
* Getters should not perform any expensive operations. (A notable failure of the platform in this
    regard is getters like <code>offsetTop</code> performing layout; do not repeat this mistake.)
* Ensure that your attribute's getter returns the same object each time it is called, until some
    occurrence in another part of the system causes a logical "reset" of the property's value. In
    particular, <code>obj.attribute === obj.attribute</code> must always hold, and so returning a
    new value from the getter each time is not allowed.
* Whenever possible, preserve values given to the setter for return from the getter. That is,
    given <code>obj.attribute = x</code>, a subsequent <code>obj.attribute === x</code> should be
    true. (This will not always be the case, e.g. if a normalization or type conversion step is
    necessary, but should be held as a goal for normal code paths.)

<h3 id="casing-rules">Use casing rules consistent with existing APIs</h3>

Although they haven't always been uniformly followed, through the history of web platform API
design, the following rules have emerged:

<table class="data complex">
    <thead>
        <tr>
            <th></th>
            <th>Casing rule</th>
            <th>Examples</th>
        </tr>
    </thead>
    <tr>
        <th>Methods and properties</th>
        <td>Camel case</td>
        <td><code>document.createAttribute()</code><br>
            <code>document.compatMode</code></td>
    </tr>
    <tr>
        <th>Classes and mixins</th>
        <td>Pascal case</td>
        <td><code>NamedNodeMap</code><br>
            <code>NonElementParentNode</code></td>
    </tr>
    <tr>
        <th>Initialisms in APIs</th>
        <td>All caps, except when the first word in a method or property</td>
        <td><code>HTMLCollection</code><br>
            <code>element.innerHTML</code><br>
            <code>document.bgColor</code></td>
    </tr>
    <tr>
        <th>Repeated initialisms in APIs</th>
        <td>Follow the same rule</td>
        <td><code>HTMLHRElement</code><br>
            <code>RTCDTMFSender</code><br>
    </tr>
    <tr>
        <th>The abbreviation of "identity"</th>
        <td><code>Id</code>, except when the first word in a method or property</td>
        <td><code>node.getElementById()</code><br>
            <code>event.pointerId</code><br>
            <code>credential.id</code></td>
    </tr>
    <tr>
        <th>Enumeration values</th>
        <td>Lowercase, dash-delimited</td>
        <td><code>"no-referrer-when-downgrade"</code></td>
    </tr>
    <tr>
        <th>Events</th>
        <td>Lowercase, concatenated</td>
        <td><code>autocompleteerror</code><br>
            <code>languagechange</code></td>
    </tr>
    <tr>
        <th>HTML elements and attributes</th>
        <td>Lowercase, concatenated</td>
        <td><code>&lt;figcaption&gt;</code><br>
            <code>&lt;textarea maxlength&gt;</code></td>
    </tr>
    <tr>
        <th>JSON keys</th>
        <td>Lowercase, underscore-delimited</td>
        <td><code>manifest.short_name</code></td>
    </tr>
</table>

<div class="note">
Note that in particular, when a HTML attribute is <a>reflected</a> as a property, the attribute
and property's casings will not necessarily match. For example, the HTML attribute
<code>novalidate</code> on <code>&lt;form&gt;</code> is <a>reflected</a> as the
<code>noValidate</code> property on <code>HTMLFormElement</code>.
</div>

<div class="note">
Repeated initialisms are particularly non-uniform throughout the platform. Infamous historical
examples that violate the above rules are <code>XMLHttpRequest</code> and
<code>HTMLHtmlElement</code>. Do not follow their example; instead always capitalize your
initialisms, even if they are repeated.
</div>

<h3 id="prefer-dict-to-bool">Prefer dictionary parameters over boolean parameters or other unreadable parameters</h3>

APIs should generally prefer dictionary parameters
(with named booleans in the dictionary)
over boolean parameters.
This makes the code that calls the API
<a href="https://ariya.io/2011/08/hall-of-api-shame-boolean-trap">much more readable</a>.
It also makes the API more extensible in the future,
particularly if multiple booleans are needed.

<p class="example">For example,
<code highlight="js">new Event("exampleevent", { bubbles: true, cancelable: false})</code>
is much more readable than
<code highlight="js">new Event("exampleevent", true, false)</code>.

Furthermore,
the booleans in dictionaries need to be designed so that they all default to false.
If booleans default to true, then
<a href="https://lists.w3.org/Archives/Public/public-script-coord/2013OctDec/0302.html">users of the API will find unexpected JavaScript behavior</a> since <code highlight="js">{ passive: false }</code> and <code highlight="js">{ passive: undefined }</code> will produce different results.
But at the same time, it's important to avoid naming booleans in negative ways,
because then code will have confusing double-negatives.
These pieces of advice may sometimes conflict,
but the conflict can be avoided by using opposite words without negatives,
such as &ldquo;repeat&rdquo; versus &ldquo;once&rdquo;,
&ldquo;isolate&rdquo; versus &ldquo;connect&rdquo;,
or &ldquo;private&rdquo; versus &ldquo;public&rdquo;.

Likewise, APIs should use dictionary parameters to avoid other cases
of difficult to understand sequences of parameters.
For example,
<code highlight="js">window.scrollBy({ left: 50, top: 0 })</code>
is more readable than
<code highlight="js">window.scrollBy(50, 0)</code>.

<h3 id="always-add-event-handlers">Always add event handler attributes</h3>

For an object that inherits from {{EventTarget}}, there are two techniques available for registering
an event handler (e.g., an event named "somethingchanged"):

1. {{EventTarget/addEventListener()}} which allows authors to register for the event using the
    event's name (i.e.,
    <code highlight="js">someobject.addEventListener("somethingchanged", myhandler)</code>) and
2. `onsomethingchanged` IDL attributes which allow one event handler to be directly assigned to the
    object (i.e., <code highlight="js">someobject.onsomethingchanged</code>).

Because there are two techniques for registering events on objects inheriting from {{EventTarget}},
authors may be tempted to omit the corresponding [=event handler IDL attributes=]. They may assume
that event handler IDL attributes are a legacy registration technique or are simply not needed
given that {{EventTarget/addEventListener()}} is available as an alternative. However, it is
important to continue to define event handler IDL attributes because:

* they preserve consistency in the platform
* they enable feature-detection for the supported events

So, if the object inherits from {{EventTarget}}, add a corresponding
<code>on<em>yourevent</em></code> [=event handler IDL attribute=] to the interface.

<p class="note">Note that for HTML and SVG elements, it is traditional to add the
[=event handler IDL attributes=] on the {{GlobalEventHandlers}} interface, instead of directly on
the relevant element interface(s).</p>

<h2 id="types-and-units">Types and Units</h2>

<h3 id="numeric-types">Use numeric types appropriately</h3>

[[!WEBIDL]], because of its OMG IDL heritage, has a plethora of numeric types. However, it is very
rare that its more specific ones are actually appropriate.

Remember that JavaScript itself only has one numeric type, Number: IEEE 754 double-precision
floating point, including ±0, ±Infinity, and NaN (although thankfully only one). The Web IDL
"types" are simply coercion rules that apply when accepting an argument or triggering a setter. For
example, a Web IDL <code>unsigned short</code> roughly says: "when someone passes this as an
argument, take it modulo 65535 before doing any further processing". That is very rarely a useful
thing to do.

Instead, you probably want to stick with one of:

  : <code>unrestricted double</code>
  :: When truly any JavaScript number will do, including infinities and NaN

  : <code>double</code>
  :: Any JavaScript number excluding infinities and NaN

  : <code>[EnforceRange] long long</code>
  :: Any JavaScript number in the integer-representable range, throwing a <code>TypeError</code>
      outside the range and rounding inside of it

  : <code>[EnforceRange] unsigned long long</code>
  :: Any nonnegative JavaScript number in the integer-representable range, throwing a
      <code>TypeError</code> outside the range and rounding inside of it

Additionally, you can combine any of the above with an extra line in your algorithm to validate
that the number is within the expected domain-specific range, and throwing or performing other
actions in response. (While it is very rarely appropriate to modify author input by taking it
modulo 65535, it might be appropriate to take it modulo 360, for example.)

A special case of domain-specific validation, which Web IDL already has you covered for, is the
0–255 range. This can be written as <code>[EnforcedRange] octet</code>: any JavaScript number in
the range 0–255, throwing a <code>TypeError</code> outside the range and rounding inside of it.
(And indeed, if it turns out that the other power-of-two ranges are semantically meaningful for
your domain, such that you want the modulo or range-checking behavior, feel free to use them.)

<div class="note">
Those coming from other languages should carefully note that despite their names,
<code>long long</code> and <code>unsigned long long</code> only have 53 bits of precision, and
not 64.
</div>

<h3 id="milliseconds">Use milliseconds for time measurement</h3>

Any web API that accepts a time measurement should do so in milliseconds. This is a tradition
stemming from <code>setTimeout</code> and the <code>Date</code> API, and carried through since
then.

Even if seconds (or some other unit) are more natural in the domain of an API, sticking with
milliseconds ensures interoperability with the rest of the platform, allowing easy arithmetic with
other time quantities.

Note that high-resolution time is usually represented as fractional milliseconds, not e.g. as
nanoseconds.

<h3 id="times-and-dates">Use the appropriate type to represent times and dates</h3>

When representing date-times on the platform, use the {{DOMTimeStamp}} type, with values being the
 number of milliseconds relative to 1970-01-01T00:00:00Z.

The Web IDL <code>Date</code> type must not be used for this purpose. <code>Date</code> objects are
 mutable (and there is no way to make them immutable), which comes with a host of attendant
 problems.

<div class="note">
    For more background on why <code>Date</code> must not be used, see the following:

    * <a href="https://esdiscuss.org/topic/frozen-date-objects">Frozen date objects?</a> on
        es-discuss
    * <a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=22824">Remove Date from Web IDL</a>
        on the Web IDL Bugzilla
</div>

However, date-times are not monotonically increasing; subsequent values may either decrease or
remain the same. The limitation to millisecond resolution can also be constraining. Thus, for time
stamps that do not need to correspond to an absolute time, consider using {{DOMHighResTimeStamp}},
which provides monotically increasing sub-millisecond timestamps that are comparable within a
single <a>browsing context</a> or web worker. See [[!HIGHRES-TIME]] for more details.

<h2 id="device-apis">Device APIs</h2>

It is increasingly common to see new APIs developed in the web platform for interacting with
devices. For example, authors wish to be able to use the web to connect with their
<a href="https://www.w3.org/TR/mediacapture-streams/">microphones and cameras</a>,
<a href="https://www.w3.org/TR/generic-sensor/">generic sensors</a> (such as gyroscope and
accelerometer),
<a href="https://www.w3.org/community/web-bluetooth/">Bluetooth</a> and
<a href="https://wicg.github.io/webusb/">USB</a>-connected peripherals,
<a href="https://www.w3.org/community/autowebplatform/">automobiles</a>, toothbrush, etc. This
section contains principles for consideration when designing APIs for devices.

<h3 id="device-ids">Use care when exposing device identifiers</h3>

Exposing device identifiers increases the fingerprinting surface of a user
agent conversely reducing the user's privacy. Think carefully about whether it is really necessary
to expose the unique identifier at all. Please read the TAG's finding on
<a href="http://www.w3.org/2001/tag/doc/unsanctioned-tracking/">unsanctioned tracking</a> for
additional details. Despite this general concern, it may be very useful or necessary to expose a
device's unique identifier to the web platform. The following guidelines will help ensure that this
is done in a consistent and privacy-friendly way:

 : Limit identifiable information in the id
 :: As much as possible, device ids exposed to the web platform should not contain identifiable
     information such as branding, make and model numbers, etc. In many cases using a randomized
     number or unique id is preferable to a generic string identifier such as "device1".
 :: Device ids expressed as numbers should contain sufficient entropy so as to avoid re-use or
     potential sharing among other devices, and should not be easily guessable.

 : Keep the user in control
 :: Any existing device ids mapped to or stored with the current session by the user agent should
     be cleared when users elect to "clear their cookies" (and other related settings). Above all,
     the user should be in control of this potential tracking state and be able to reset it on
     demand.

 : Hide sensitive ids behind a user permission
 :: Where device indentification does not make sense to be expressed in an anonymous way, access to
     the identifier should be limited by default. One way to limit exposure is to only surface the
     identifier to author code <em>after</em> obtaining permission from the user.

 : Tie ids to the same-origin model
 :: Identifiers should be unique to the origin of the web content that is attempting to access
     them. Web content from one origin should receive an identifier that is distinct from the
     identifier given to web content from any other origin despite the physical device being the
     same.
 :: Within an origin, ids may have a stable representation to web content. This ensures a
     consistent developer experience if requesting the same device twice.

 : Persistable when necessary
 :: Device identifiers obtained after a complex or time-consuming device selection process may
     prefer that author code be allowed to persist the id for use in a later session in order to
     avoid the selection process a second time. In this case, the API should not only provide a
     stable id during the session for the given origin, but also be able to deterministicly produce
     the same id in subsequent sessions.


<h2 id="other-considerations">Other API Design Considerations</h2>

It is important not to neglect other aspects of API design such as privacy and security. Please
take advantage of these other excellent resources in your design process:

* <a href="https://w3c.github.io/privacy-considerations/">Privacy Considerations for Web Protocols</a>
* <a href="https://www.w3.org/TR/security-privacy-questionnaire/">Self-Review Questionnaire: Security and Privacy</a>

<pre class="anchors">
url: https://w3c.github.io/hr-time/#dom-domhighrestimestamp; spec: HIGHRES-TIME; type: typedef
    text: DOMHighResTimeStamp
urlPrefix: https://heycam.github.io/webidl/; spec: WEBIDL; type: interface
    text: DOMTimeStamp; url: #common-DOMTimeStamp
</pre>

